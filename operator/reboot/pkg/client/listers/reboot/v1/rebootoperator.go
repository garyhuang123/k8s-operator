/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s-operator/operator/reboot/pkg/apis/reboot/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RebootOperatorLister helps list RebootOperators.
type RebootOperatorLister interface {
	// List lists all RebootOperators in the indexer.
	List(selector labels.Selector) (ret []*v1.RebootOperator, err error)
	// RebootOperators returns an object that can list and get RebootOperators.
	RebootOperators(namespace string) RebootOperatorNamespaceLister
	RebootOperatorListerExpansion
}

// rebootOperatorLister implements the RebootOperatorLister interface.
type rebootOperatorLister struct {
	indexer cache.Indexer
}

// NewRebootOperatorLister returns a new RebootOperatorLister.
func NewRebootOperatorLister(indexer cache.Indexer) RebootOperatorLister {
	return &rebootOperatorLister{indexer: indexer}
}

// List lists all RebootOperators in the indexer.
func (s *rebootOperatorLister) List(selector labels.Selector) (ret []*v1.RebootOperator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RebootOperator))
	})
	return ret, err
}

// RebootOperators returns an object that can list and get RebootOperators.
func (s *rebootOperatorLister) RebootOperators(namespace string) RebootOperatorNamespaceLister {
	return rebootOperatorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RebootOperatorNamespaceLister helps list and get RebootOperators.
type RebootOperatorNamespaceLister interface {
	// List lists all RebootOperators in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.RebootOperator, err error)
	// Get retrieves the RebootOperator from the indexer for a given namespace and name.
	Get(name string) (*v1.RebootOperator, error)
	RebootOperatorNamespaceListerExpansion
}

// rebootOperatorNamespaceLister implements the RebootOperatorNamespaceLister
// interface.
type rebootOperatorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RebootOperators in the indexer for a given namespace.
func (s rebootOperatorNamespaceLister) List(selector labels.Selector) (ret []*v1.RebootOperator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RebootOperator))
	})
	return ret, err
}

// Get retrieves the RebootOperator from the indexer for a given namespace and name.
func (s rebootOperatorNamespaceLister) Get(name string) (*v1.RebootOperator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("rebootoperator"), name)
	}
	return obj.(*v1.RebootOperator), nil
}
