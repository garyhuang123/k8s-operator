/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s-operator/operator/reboot/pkg/apis/reboot/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RebootLister helps list Reboots.
type RebootLister interface {
	// List lists all Reboots in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Reboot, err error)
	// Reboots returns an object that can list and get Reboots.
	Reboots(namespace string) RebootNamespaceLister
	RebootListerExpansion
}

// rebootLister implements the RebootLister interface.
type rebootLister struct {
	indexer cache.Indexer
}

// NewRebootLister returns a new RebootLister.
func NewRebootLister(indexer cache.Indexer) RebootLister {
	return &rebootLister{indexer: indexer}
}

// List lists all Reboots in the indexer.
func (s *rebootLister) List(selector labels.Selector) (ret []*v1alpha1.Reboot, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Reboot))
	})
	return ret, err
}

// Reboots returns an object that can list and get Reboots.
func (s *rebootLister) Reboots(namespace string) RebootNamespaceLister {
	return rebootNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RebootNamespaceLister helps list and get Reboots.
type RebootNamespaceLister interface {
	// List lists all Reboots in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Reboot, err error)
	// Get retrieves the Reboot from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Reboot, error)
	RebootNamespaceListerExpansion
}

// rebootNamespaceLister implements the RebootNamespaceLister
// interface.
type rebootNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Reboots in the indexer for a given namespace.
func (s rebootNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Reboot, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Reboot))
	})
	return ret, err
}

// Get retrieves the Reboot from the indexer for a given namespace and name.
func (s rebootNamespaceLister) Get(name string) (*v1alpha1.Reboot, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("reboot"), name)
	}
	return obj.(*v1alpha1.Reboot), nil
}
