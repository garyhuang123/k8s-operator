/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s-operator/operator/patch/pkg/apis/patch/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PatchOperatorLister helps list PatchOperators.
type PatchOperatorLister interface {
	// List lists all PatchOperators in the indexer.
	List(selector labels.Selector) (ret []*v1.PatchOperator, err error)
	// PatchOperators returns an object that can list and get PatchOperators.
	PatchOperators(namespace string) PatchOperatorNamespaceLister
	PatchOperatorListerExpansion
}

// patchOperatorLister implements the PatchOperatorLister interface.
type patchOperatorLister struct {
	indexer cache.Indexer
}

// NewPatchOperatorLister returns a new PatchOperatorLister.
func NewPatchOperatorLister(indexer cache.Indexer) PatchOperatorLister {
	return &patchOperatorLister{indexer: indexer}
}

// List lists all PatchOperators in the indexer.
func (s *patchOperatorLister) List(selector labels.Selector) (ret []*v1.PatchOperator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PatchOperator))
	})
	return ret, err
}

// PatchOperators returns an object that can list and get PatchOperators.
func (s *patchOperatorLister) PatchOperators(namespace string) PatchOperatorNamespaceLister {
	return patchOperatorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PatchOperatorNamespaceLister helps list and get PatchOperators.
type PatchOperatorNamespaceLister interface {
	// List lists all PatchOperators in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.PatchOperator, err error)
	// Get retrieves the PatchOperator from the indexer for a given namespace and name.
	Get(name string) (*v1.PatchOperator, error)
	PatchOperatorNamespaceListerExpansion
}

// patchOperatorNamespaceLister implements the PatchOperatorNamespaceLister
// interface.
type patchOperatorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PatchOperators in the indexer for a given namespace.
func (s patchOperatorNamespaceLister) List(selector labels.Selector) (ret []*v1.PatchOperator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PatchOperator))
	})
	return ret, err
}

// Get retrieves the PatchOperator from the indexer for a given namespace and name.
func (s patchOperatorNamespaceLister) Get(name string) (*v1.PatchOperator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("patchoperator"), name)
	}
	return obj.(*v1.PatchOperator), nil
}
